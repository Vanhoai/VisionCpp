cmake_minimum_required(VERSION 3.18)

project(VisionNative
        VERSION 1.0.0
        DESCRIPTION "Computer Vision and Deep Learning with native performance"
        LANGUAGES C CXX
)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Add cmake modules path
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# Include utilities
include(cmake/CompilerFlags.cmake)
include(cmake/Dependencies.cmake)
include(cmake/Functions.cmake)

# Options
option(BUILD_TESTS "Build Tests" OFF)
option(BUILD_BENCHMARKS "Build Benchmarks" ON)
option(ENABLE_CUDA "Enable CUDA Support" OFF)

# Set build type
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif ()

# Global compile definitions
add_compile_definitions(
        $<$<CONFIG:Debug>:DEBUG_MODE>
        $<$<CONFIG:Release>:RELEASE_MODE>
)

# Set up dependencies
setup_dependencies()

# Add subdirectories
#add_subdirectory(extern)
add_subdirectory(src)
add_subdirectory(apps)

if (BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif ()

# Installation
include(GNUInstallDirs)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# Export targets
# install(EXPORT ${PROJECT_NAME}Targets
#        FILE ${PROJECT_NAME}Targets.cmake
#        NAMESPACE ${PROJECT_NAME}::
#        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
# )

# Create config file
# include(CMakePackageConfigHelpers)
# configure_package_config_file(
#         "${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in"
#         "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
#         INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
# )
#
# write_basic_package_version_file(
#         "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
#         VERSION ${PROJECT_VERSION}
#         COMPATIBILITY SameMajorVersion
# )


add_executable(
        ${PROJECT_NAME}
        main.cpp
)


